# frozen_string_literal: true

require './lib/people_hub/person_request'
# Person API helper function
def file_to_response(path, code_num)
  unless path.nil?
    file = File.read(path)
    format = File.extname(path).from(1).downcase.to_sym
    parser = HTTParty::Parser.new(file, format)
    data = parser.parse
  end
  instance_double('response',
                  response: instance_double('child_response'),
                  code: code_num, parsed_response: data)
end

# helper for stubbing a PeopleHub::PersonRequest.get
#
# @param email [String] defaults to email generated by user factory
# stubs the request to return a PeopleHub::Person with the given email
def stub_people_hub(email = attributes_for(:user)[:email])
  person = instance_double(PeopleHub::Person, person_attrs(email))
  allow(PeopleHub::PersonRequest).to receive(:get).and_return(person)
end

# helper for stubbing a PeopleHub::PersonRequest.get to receive a value
#
# @param search_hash [Hash] the search param that get() should expect
def stub_people_hub_with(search_hash)
  person = instance_double(PeopleHub::Person, person_attrs)
  allow(PeopleHub::PersonRequest).to \
    receive(:get).with(search_hash).and_return(person)
end

# helper for stubbing a failed PeopleHub::PersonRequest.get
#
# @param search_hash [Hash]
def stub_failed_people_hub(search_hash)
  allow(PeopleHub::PersonRequest).to \
    receive(:get).with(search_hash).and_raise(RuntimeError)
end

def person_attrs(email = attributes_for(:user)[:email])
  { first_name: 'Luke', last_name: 'Skywalker',
    email: email, net_id: 'ls222', upi: '12345678',
    phone: '+1 (555) 555-5555' }
end
